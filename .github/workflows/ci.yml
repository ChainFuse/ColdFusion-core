name: Compile, Test, and Publish

on:
  push:
    branches:
      - '**'
    paths:
      - '.github/workflows/ci.yml'
      - 'src/**'
      - 'test/**'
      - 'action.yml'
      - 'package*.json'
      - 'tsconfig.json'
    tags-ignore:
      - '**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - uses: step-security/harden-runner@5c7944e73c4c2a096b17a9cb74d65b6c2bbafbde # v2.9.1
        with:
          disable-sudo: true
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: lts/*
          check-latest: true
          cache: 'npm'
      - run: npm ci
      - name: Prepare cache
        id: ncc-cache
        run: echo "NCC_CACHE_DIR=$(npx ncc cache dir)" >> $GITHUB_OUTPUT
      - uses: actions/cache/restore@3624ceb22c1c5a301c8db4169662070a689d9ea8 # v4.1.1
        with:
          path: |
            ${{ steps.ncc-cache.outputs.NCC_CACHE_DIR }}
          key: ncc-cache-${{ hashFiles('src/**', 'package*.json') }}
          restore-keys: |
            ncc-cache-
          enableCrossOsArchive: true
      - run: npm run build:pre
      - run: npm run build:main
      - run: npm run build:post
      - uses: actions/cache/save@3624ceb22c1c5a301c8db4169662070a689d9ea8 # v4.1.1
        with:
          path: |
            ${{ steps.ncc-cache.outputs.NCC_CACHE_DIR }}
          key: ncc-cache-${{ hashFiles('src/**', 'package*.json') }}
          enableCrossOsArchive: true
      - uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: dist
          path: ${{ github.workspace }}/dist
          if-no-files-found: error
          retention-days: 1
          compression-level: 9
  test:
    needs: ['compile']
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # macos-14/latest is m1 chip and has GPU + NPU
        # I would also test the GPU runners but I don't have the money to ci them
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: step-security/harden-runner@5c7944e73c4c2a096b17a9cb74d65b6c2bbafbde # v2.9.1
        with:
          disable-sudo: false
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Delete old compiled action
        run: rm -rv dist
        shell: bash
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: dist
          path: ${{ github.workspace }}/dist
      - run: ls -liA ${{ runner.tool_cache }}
        if: runner.os != 'Windows'
        shell: pwsh
      - run: Get-ChildItem -Path ${{ runner.temp }} -Recurse | Format-Table FullName
        shell: pwsh
      - uses: ./
      - run: ls -liA ${{ runner.tool_cache }}
        if: always() && runner.os != 'Windows'
        shell: pwsh
      - run: ls -liA ${{ runner.tool_cache }}/ollama/*/${{ runner.arch }}
        if: always() && runner.os != 'Windows'
        shell: pwsh
      - run: ls -liA /Library/LaunchDaemons/
        if: always() && runner.os == 'macOS'
      - run: sudo launchctl list
        if: always() && runner.os == 'macOS'
      - run: sudo launchctl bootstrap system /Library/LaunchDaemons/com.ollama.ollama.plist
        if: always() && runner.os == 'macOS'
      - run: Get-ChildItem -Path ${{ runner.temp }}/ColdFusion/models -Recurse | Format-Table FullName
        if: always()
        shell: pwsh
  # publish:
  #   needs: ['test']
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   steps:
  #     - uses: step-security/harden-runner@5c7944e73c4c2a096b17a9cb74d65b6c2bbafbde # v2.9.1
  #       with:
  #         disable-sudo: true
  #         egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs
  #     - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
  #     - name: Delete old compiled action
  #       run: rm -rv dist
  #       shell: bash
  #     - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
  #       with:
  #         name: dist
  #         path: ${{ github.workspace }}/dist
  #     - name: Git Setup
  #       run: |
  #         git config user.name "github-actions[bot]"
  #         git config user.email "github-actions[bot]@users.noreply.github.com"
  #     - name: Check for Changes
  #       id: changes
  #       run: |
  #         if [ -n "$(git status --porcelain)" ]; then
  #           echo "changes=true" >> $GITHUB_OUTPUT
  #         else
  #           echo "changes=false" >> $GITHUB_OUTPUT
  #         fi
  #     - run: git add dist/
  #     - run: git commit -m "[ci skip] $PREVIOUS_GIT_MESSAGE"
  #       if: steps.changes.outputs.changes == 'true'
  #       shell: bash
  #       env:
  #         PREVIOUS_GIT_MESSAGE: ${{ github.event.head_commit.message }}
  #     - run: git push
  #       if: steps.changes.outputs.changes == 'true'
